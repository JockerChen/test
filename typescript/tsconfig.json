{
  //typescript的编译配置
  // include表示包含
  // exclude表示排除编译的文件（可选）
  // "extends": "./config/inf"  继承  多个复杂的配置文件
  // "files": ["./array"],//编译哪些文件（单个文件）
  //其中两个**表示任意文件夹
  //其中一个文件表示任意文件
  "include": ["./src/**/*"],
  "exclude": ["./array.ts"],

  "compilerOptions": {
    "target": "ES2015", //用来指定编译的es的版本（ES3、ES5、ES6、es2015、ES2016、ES2017、ES2018、ES2019、ES2020、ESNEXT）
    // "module": "none",//模块化方案 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'esnext'
    // "lib": [],//一般使用的库Dom、Bom需要其他引用的库（通常不需要）'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'
    "removeComments": true, // 编译过程中注释去掉
    "strict": true, // 表示他后面的配置项默认都为 true所有严格模式的总开关(一般情况下，这个都往上放)(开发时建议全开启)
    "rootDir": "./src", // 要编译的文件夹
    "outDir": "./dist", // 把编译好的文件夹放置到 dist 文件夹中
    // "outFile": "./dist/app.js", //用的不多，正常这个打包工具做针对全局的变量进行代码合并成一个文件(将多个ts的代码进行合并)，设置完outFile所有全局的作用域的代码进行合并
    "allowJs": true, // 是否允许编译 js 代码,当设置成true后可将相应的文件进行编译，并声场到
    "noImplicitAny": true, // 不明确的 any 类型必须加类型注解(隐式的ANY效验)
    "strictNullChecks": true, // 是否强制校验 Null，比如 const ss: string = null; 会报错，如果是 false 不报错
    "noEmit": false,          //不生成编译后的文件
    "noEmitOnError": false,//当有错误的时候不生成编译文件（常用）
    "incremental": true, // 之前编译过的内容不在编译，只编译新增的内容
    // incremental 打开后编译后会生成 tsconfig.ts buildinfo，下次编译会去做比对，有不同的地方再进行编译
    "checkJs": true, // 对 js 语法进行检测，比如 js 语法写错了
    // "sourceMap": true, // 打包完生成 .js.map 文件
    // "noUnusedLocals": true, // 没有使用到的变量会提示
    // "noUnusedParameters": true, // 函数里面没有用到的参数会提示
    // "noImplicitThis": true,//不明确this指针
    // "alwaysStrict": true,       //开启严格模式（确认生成后的文件是否为严格模式） import模块下自动就是 进入到严格模式下
  }
}